{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { NextRequest } from \"next/server\";\nimport * as jose from \"jose\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Define public routes that don't require authentication\nconst publicRoutes = [\n  \"/\",\n  \"/login\",\n  \"/create-account\",\n  \"/forgot-password\",\n  \"/api/auth/login\",\n  \"/api/auth/register\",\n  \"/api/auth/logout\",\n  \"/_next\",\n  \"/favicon.ico\",\n];\n\nexport async function middleware(request: NextRequest) {\n  const path = request.nextUrl.pathname;\n\n  // Allow access to public routes\n  if (publicRoutes.some((route) => path.startsWith(route))) {\n    return NextResponse.next();\n  }\n\n  // Check for session token\n  const sessionToken = request.cookies.get(\"session_token\")?.value;\n\n  if (!sessionToken) {\n    return redirectToLogin(request);\n  }\n\n  try {\n    // Verify the token using jose\n    const secretKey = new TextEncoder().encode(JWT_SECRET);\n    const { payload } = await jose.jwtVerify(sessionToken, secretKey);\n\n    // Add user info to headers for route handlers\n    const requestHeaders = new Headers(request.headers);\n    requestHeaders.set(\"x-user-id\", payload.userId as string);\n    requestHeaders.set(\"x-user-role\", payload.role as string);\n\n    // Continue to route with added headers\n    return NextResponse.next({\n      headers: requestHeaders,\n    });\n  } catch (error) {\n    // Token is invalid or expired\n    console.error(\"JWT verification failed:\", error);\n    return redirectToLogin(request);\n  }\n}\n\nfunction redirectToLogin(request: NextRequest) {\n  const loginUrl = new URL(\"/login\", request.url);\n  loginUrl.searchParams.set(\"from\", request.nextUrl.pathname);\n  return NextResponse.redirect(loginUrl);\n}\n\n// Configure which routes to run middleware on\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api/auth (auth API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    \"/((?!api/auth|_next/static|_next/image|favicon.ico).*)\",\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAE7C,yDAAyD;AACzD,MAAM,eAAe;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,eAAe,WAAW,OAAoB;IACnD,MAAM,OAAO,QAAQ,OAAO,CAAC,QAAQ;IAErC,gCAAgC;IAChC,IAAI,aAAa,IAAI,CAAC,CAAC,QAAU,KAAK,UAAU,CAAC,SAAS;QACxD,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,0BAA0B;IAC1B,MAAM,eAAe,QAAQ,OAAO,CAAC,GAAG,CAAC,kBAAkB;IAE3D,IAAI,CAAC,cAAc;QACjB,OAAO,gBAAgB;IACzB;IAEA,IAAI;QACF,8BAA8B;QAC9B,MAAM,YAAY,IAAI,cAAc,MAAM,CAAC;QAC3C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,+JAAA,CAAA,YAAc,AAAD,EAAE,cAAc;QAEvD,8CAA8C;QAC9C,MAAM,iBAAiB,IAAI,QAAQ,QAAQ,OAAO;QAClD,eAAe,GAAG,CAAC,aAAa,QAAQ,MAAM;QAC9C,eAAe,GAAG,CAAC,eAAe,QAAQ,IAAI;QAE9C,uCAAuC;QACvC,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,8BAA8B;QAC9B,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gBAAgB;IACzB;AACF;AAEA,SAAS,gBAAgB,OAAoB;IAC3C,MAAM,WAAW,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC9C,SAAS,YAAY,CAAC,GAAG,CAAC,QAAQ,QAAQ,OAAO,CAAC,QAAQ;IAC1D,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;AAC/B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}